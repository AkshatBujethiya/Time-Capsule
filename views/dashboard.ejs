<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Time Capsule</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .glass {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        .modal {
            transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
        }
        .hidden {
            opacity: 0;
            transform: scale(0.9);
            pointer-events: none;
        }
        .visible {
            opacity: 1;
            transform: scale(1);
            pointer-events: auto;
        }
        .tag {
            display: inline-block;
            background-color: #e2e8f0;
            color: #2d3748;
            padding: 0.5rem;
            border-radius: 0.25rem;
            margin: 0.25rem;
        }
        .tag .remove-tag {
            margin-left: 0.5rem;
            cursor: pointer;
        }
    </style>
</head>
<body class="bg-gradient-to-r from-pink-500 to-purple-700 h-screen flex">

    <!-- Sidebar -->
    <aside class="w-64 bg-white shadow-lg h-full p-6 glass">
        <div class="text-xl font-bold text-blue-900 flex items-center space-x-2">
            <img src="/images/background1.png" alt="Virtual Time Capsule" class="w-6 h-6 object-contain">
            <span>Time Capsule</span>
        </div>
        <nav class="mt-6 space-y-4">
            <a href="/dashboard" class="flex items-center space-x-2 text-black font-semibold p-3 rounded-lg bg-gray-300 hover:bg-blue-300 space-x-2 transform transition-all hover:scale-110">
                <span>üè†</span>
                <span>Home</span>
            </a>
            <a href="/myaccount" class="flex items-center space-x-2 text-gray-600 p-3 rounded-lg hover:bg-blue-300 space-x-2 transform transition-all hover:scale-110">
                <span>üë§</span>
                <span>Account</span>
            </a>
            <a href="/logout" class="flex items-center space-x-2 text-gray-600 p-3 rounded-lg hover:bg-red-300 space-x-2 transform transition-all hover:scale-110">
                <span>üö™</span>
                <span>Logout</span>
            </a>
        </nav>
    </aside>

    <!-- Main Content -->
    <main class="flex-1 flex flex-col items-center justify-center text-center p-8">
        <div class="bg-white shadow-lg p-10 glass flex flex-col items-center">
            <h1 class="text-3xl font-bold text-blue-800">Welcome!</h1>
            <p class="text-gray-600 mt-2">
                Create your first capsule and document your journey!
            </p>
            
            <!-- Centered Image -->
            <img src="/images/background9.png" alt="Graduation" class="w-40 mt-6 rounded-lg shadow-md">
            
            <!-- Create Capsule Button -->
            <button id="openCapsule" class="mt-6 bg-blue-600 text-white px-6 py-3 rounded-full shadow-lg flex items-center space-x-2 transform transition-all hover:scale-110">
                <span>‚ûï</span>
                <span>Create Capsule</span>
            </button>
        </div>
    </main>

    <!-- Capsule Modal -->
    <div id="capsuleModal" class="fixed inset-0 bg-gray-800 bg-opacity-70 flex items-center justify-center hidden modal">
        <div class="bg-white rounded-lg p-6 w-96 shadow-lg relative">
            <button id="closeCapsule" class="absolute top-2 right-2 text-gray-500 hover:text-gray-800 text-lg">‚ùå</button>
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Create New Capsule</h2>
            <form id="capsuleForm" action="/upload" method="post" enctype="multipart/form-data">
                <input name="capsuleName" type="text" placeholder="Capsule Name" class="mt-4 p-3 border rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-600" required>
                <textarea name="capsuleDescription" placeholder="Capsule Description (Optional)" class="mt-4 p-3 border rounded w-full h-24 focus:outline-none focus:ring-2 focus:ring-blue-600"></textarea>
                <div class="mt-4">
                    <label for="fileInput" class="block text-gray-700">Select Files</label>
                    <input id="fileInput" type="file" name="files" class="hidden" multiple required>
                    <div class="flex items-center mt-2">
                        <label for="fileInput" class="bg-blue-600 text-white px-4 py-2 rounded cursor-pointer hover:bg-blue-700 transition">Choose Files</label>
                        <span id="fileName" class="ml-3 text-gray-600">No file chosen</span>
                    </div>
                </div>
                <div class="mt-4">
                    <label for="unlockDate" class="block text-gray-700">Unlock Date & Time</label>
                    <input name="unlockDate" type="datetime-local" class="mt-2 p-3 border rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-600" required>
                </div>
                <div class="mt-4">
                    <label for="lockOption" class="block text-gray-700">Lock Option</label>
                    <select name="lockOption" id="lockOption" class="mt-2 p-3 border rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-600" required>
                        <option value="immediate">Lock Immediately</option>
                        <option value="specified">Lock at Specified Date</option>
                    </select>
                </div>
                <div class="mt-4" id="lockDateContainer" style="display: none;">
                    <label for="lockDate" class="block text-gray-700">Lock Date & Time</label>
                    <input name="lockDate" type="datetime-local" class="mt-2 p-3 border rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-600">
                </div>
                <div class="mt-4">
                    <label for="visibility" class="block text-gray-700">Visibility</label>
                    <select name="visibility" id="visibility" class="mt-2 p-3 border rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-600" required>
                        <option value="private">Private</option>
                        <option value="shared">Shared with Specific Users</option>
                        <option value="public">Public</option>
                    </select>
                </div>
                <div class="mt-4" id="friendEmailsContainer" style="display: none;">
                    <label for="friendEmails" class="block text-gray-700">Share with (Friend's Emails)</label>
                    <input id="friendEmailsInput" type="text" placeholder="Enter friends' emails" class="mt-2 p-3 border rounded w-full focus:outline-none focus:ring-2 focus:ring-blue-600">
                    <div id="emailTags" class="mt-2"></div>
                </div>
                <button type="submit" id="submitCapsule" class="bg-blue-600 text-white px-6 py-3 rounded-lg mt-6 hover:bg-blue-700 transition w-full">Save Capsule</button>
            </form>
        </div>
    </div>

    <!-- Bottom Navbar -->
    <div class="fixed bottom-0 w-full bg-white shadow-md flex justify-around p-4">
        <a href="/capsules" id="openCapsule" class="text-gray-600 hover:text-blue-600 text-4xl space-x-2 transform transition-all hover:scale-110">üíº</a>
        <a href="/sharedcapsule" class="text-gray-600 hover:text-blue-600 text-4xl space-x-2 transform transition-all hover:scale-110">üì§</a>
        <a href="/friends" class="text-gray-600 hover:text-blue-600 text-4xl space-x-2 transform transition-all hover:scale-110">üë•</a>
    </div>

    <!-- JavaScript for Capsule Popup -->
    <script>
        const openModal = document.getElementById("openCapsule");
        const closeModal = document.getElementById("closeCapsule");
        const modal = document.getElementById("capsuleModal");
        const visibilitySelect = document.getElementById("visibility");
        const friendEmailsContainer = document.getElementById("friendEmailsContainer");
        const friendEmailsInput = document.getElementById("friendEmailsInput");
        const emailTags = document.getElementById("emailTags");
        const lockOption = document.getElementById('lockOption');
        const lockDateContainer = document.getElementById('lockDateContainer');

        openModal.addEventListener("click", function() {
            modal.classList.remove("hidden");
            modal.classList.add("visible");
        });

        closeModal.addEventListener("click", function() {
            modal.classList.remove("visible");
            modal.classList.add("hidden");
        });

        // Close modal when clicking outside
        window.addEventListener("click", function(event) {
            if (event.target === modal) {
                modal.classList.remove("visible");
                modal.classList.add("hidden");
            }
        });

        // Update file name on selection
        document.getElementById("fileInput").addEventListener("change", function() {
            const fileName = this.files[0] ? this.files[0].name : "No file chosen";
            document.getElementById("fileName").textContent = fileName;
        });

        // Show/hide friend emails input based on visibility selection
        visibilitySelect.addEventListener("change", function() {
            if (this.value === "shared") {
                friendEmailsContainer.style.display = "block";
            } else {
                friendEmailsContainer.style.display = "none";
            }
        });

        // Show/hide lock date input based on lock option selection
        lockOption.addEventListener("change", function() {
            if (this.value === "specified") {
                lockDateContainer.style.display = "block";
            } else {
                lockDateContainer.style.display = "none";
            }
        });

        // Add email tag
        friendEmailsInput.addEventListener("keypress", function(event) {
            if (event.key === "Enter") {
                event.preventDefault();
                const email = friendEmailsInput.value.trim();
                if (email) {
                    addEmailTag(email);
                    friendEmailsInput.value = "";
                }
            }
        });

        function addEmailTag(email) {
            const tag = document.createElement("span");
            tag.className = "tag";
            tag.textContent = email;

            const removeTag = document.createElement("span");
            removeTag.className = "remove-tag";
            removeTag.textContent = "‚úñ";
            removeTag.addEventListener("click", function() {
                emailTags.removeChild(tag);
            });

            tag.appendChild(removeTag);
            emailTags.appendChild(tag);
        }

        // Add email tags to form before submission
        document.getElementById("capsuleForm").addEventListener("submit", function(event) {
            const emails = [];
            emailTags.querySelectorAll(".tag").forEach(tag => {
                emails.push(tag.textContent.replace("‚úñ", "").trim());
            });
            const emailInput = document.createElement("input");
            emailInput.type = "hidden";
            emailInput.name = "sharedEmails";
            emailInput.value = JSON.stringify(emails);
            this.appendChild(emailInput);
        });
    </script>

</body>
</html>
